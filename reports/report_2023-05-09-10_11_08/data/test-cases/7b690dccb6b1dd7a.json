{"uid":"7b690dccb6b1dd7a","name":"test_1[正常创建互动雷达]","fullName":"core.testcase.test_excel#test_1","historyId":"f1fad2692764e90a9114dff661c18b2e","time":{"start":1683597601154,"stop":1683597637167,"duration":36013},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-2a55b31c=\"\" src=\"http://oss-im-iss-uat.oss-cn-shanghai.aliyuncs.com/eddf67cdcb4c16539d6431079c251738-1683356638439.jpg\" style=\"width: 100%; height: 100%;\"> is not clickable at point (391, 310). Other element would receive the click: <div class=\"ivu-spin ivu-spin-large ivu-spin-fix fade-leave-active fade-leave-to\">...</div>\n  (Session info: chrome=111.0.5563.147)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0066E073]\n\t(No symbol) [0x006039F1]\n\t(No symbol) [0x00514FF8]\n\t(No symbol) [0x0054551A]\n\t(No symbol) [0x00543DEA]\n\t(No symbol) [0x0054212B]\n\t(No symbol) [0x00541257]\n\t(No symbol) [0x00538F45]\n\t(No symbol) [0x0055B0FC]\n\t(No symbol) [0x00538966]\n\t(No symbol) [0x0055B454]\n\t(No symbol) [0x0056D68C]\n\t(No symbol) [0x0055AEF6]\n\t(No symbol) [0x005371A8]\n\t(No symbol) [0x0053830D]\n\tGetHandleVerifier [0x008E4FB2+2511634]\n\tGetHandleVerifier [0x0091A4D5+2730037]\n\tGetHandleVerifier [0x0091F12C+2749580]\n\tGetHandleVerifier [0x00715270+611792]\n\t(No symbol) [0x0060C622]\n\t(No symbol) [0x00611E38]\n\t(No symbol) [0x00611F1B]\n\t(No symbol) [0x0061C35B]\n\tBaseThreadInitThunk [0x75760099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]","statusTrace":"case = {'name': '正常创建互动雷达(admin_driver)', 'steps': [(1, '点击导航栏互动雷达选项', 'click', '/html/body/div[1]/div[1]/div[1]/div[2]/div/u...ing/interactRadar/create\"]', None), (7, '输入雷达标题', 'input', '//input[@placeholder=\"请输入雷达标题\"]', 'zdh测试正常创建互动雷达标题'), ...]}\nrequest = <FixtureRequest for <Function test_1[正常创建互动雷达]>>\n\n    @allure.feature(\"Web自动化测试平台\")\n    @allure.story(suite[\"name\"])\n    @pytest.mark.parametrize(\n        \"case\",\n        suite[\"case_list\"],\n        ids=[\n            handle_name(case[\"name\"])[0] for case in suite[\"case_list\"]\n        ],  # 参数化测试的名字\n    )  # 参数化的本质：动态生成用例\n    def test_abc(case, request):\n        logger.info(\"测试用例开始执行\")\n        # print(data)\n    \n        # 如果能够调用夹具，那么就有了浏览\n        # 根据excel内容，动态调用指定的夹具\n        # 1. 拿到用例名称     用例4(admin_driver)\n        # 2. 从用例名称中，解析夹具名称    admin_driver\n        case_name = handle_name(case[\"name\"])[0]\n        fixture_name = handle_name(case[\"name\"])[1]\n    \n        logger.info(f\"解析用例名称:{case_name=}, {fixture_name=}\")\n    \n        driver = request.getfixturevalue(fixture_name)\n        kw = KeyWord(driver)\n        kw.iframe_exit()\n        if \"码\" in case_name:\n            kw.click(\"/html/body/div[1]/div[1]/div[1]/div[2]/div/ul/li[4]/div/span\")\n        kw.refresh()\n        # 根据excel内容进行关键字的调用\n        for step in case[\"steps\"]:\n            name, key, args = handle_step(step)  # 这三个变量，可以再进行处理、修改\n            # 能不能加载csv文件\n            # 能行循环调用 func\n            logger.info(f\"执行关键字{name=}, {key=}, {args=}\")\n    \n            with allure.step(name):  # 在allure显式测试步骤\n                func = getattr(kw, key)  # 通过反射，难道关键字执行函数\n>               func(*args)  # 调用关键字函数\n\ncore\\until\\cases.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\until\\kdt.py:117: in click\n    element.click()  # 普通点击\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023129BBFFA0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-2a55b31c=\"\" src=\"http://oss-im-iss-uat.oss-cn-shanghai.aliyuncs.com/eddf67cdcb4c16539d6431079c251738-1683356638439.jpg\" style=\"width: 100%; height: 100%;\"> is not clickable at point (391, 310). Other element would receive the click: <div class=\"ivu-spin ivu-spin-large ivu-spin-fix fade-leave-active fade-leave-to\">...</div>\nE         (Session info: chrome=111.0.5563.147)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0066E073]\nE       \t(No symbol) [0x006039F1]\nE       \t(No symbol) [0x00514FF8]\nE       \t(No symbol) [0x0054551A]\nE       \t(No symbol) [0x00543DEA]\nE       \t(No symbol) [0x0054212B]\nE       \t(No symbol) [0x00541257]\nE       \t(No symbol) [0x00538F45]\nE       \t(No symbol) [0x0055B0FC]\nE       \t(No symbol) [0x00538966]\nE       \t(No symbol) [0x0055B454]\nE       \t(No symbol) [0x0056D68C]\nE       \t(No symbol) [0x0055AEF6]\nE       \t(No symbol) [0x005371A8]\nE       \t(No symbol) [0x0053830D]\nE       \tGetHandleVerifier [0x008E4FB2+2511634]\nE       \tGetHandleVerifier [0x0091A4D5+2730037]\nE       \tGetHandleVerifier [0x0091F12C+2749580]\nE       \tGetHandleVerifier [0x00715270+611792]\nE       \t(No symbol) [0x0060C622]\nE       \t(No symbol) [0x00611E38]\nE       \t(No symbol) [0x00611F1B]\nE       \t(No symbol) [0x0061C35B]\nE       \tBaseThreadInitThunk [0x75760099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]\n\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"admin_driver","time":{"start":1683597601156,"stop":1683597624516,"duration":23360},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-2a55b31c=\"\" src=\"http://oss-im-iss-uat.oss-cn-shanghai.aliyuncs.com/eddf67cdcb4c16539d6431079c251738-1683356638439.jpg\" style=\"width: 100%; height: 100%;\"> is not clickable at point (391, 310). Other element would receive the click: <div class=\"ivu-spin ivu-spin-large ivu-spin-fix fade-leave-active fade-leave-to\">...</div>\n  (Session info: chrome=111.0.5563.147)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0066E073]\n\t(No symbol) [0x006039F1]\n\t(No symbol) [0x00514FF8]\n\t(No symbol) [0x0054551A]\n\t(No symbol) [0x00543DEA]\n\t(No symbol) [0x0054212B]\n\t(No symbol) [0x00541257]\n\t(No symbol) [0x00538F45]\n\t(No symbol) [0x0055B0FC]\n\t(No symbol) [0x00538966]\n\t(No symbol) [0x0055B454]\n\t(No symbol) [0x0056D68C]\n\t(No symbol) [0x0055AEF6]\n\t(No symbol) [0x005371A8]\n\t(No symbol) [0x0053830D]\n\tGetHandleVerifier [0x008E4FB2+2511634]\n\tGetHandleVerifier [0x0091A4D5+2730037]\n\tGetHandleVerifier [0x0091F12C+2749580]\n\tGetHandleVerifier [0x00715270+611792]\n\t(No symbol) [0x0060C622]\n\t(No symbol) [0x00611E38]\n\t(No symbol) [0x00611F1B]\n\t(No symbol) [0x0061C35B]\n\tBaseThreadInitThunk [0x75760099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]","statusTrace":"case = {'name': '正常创建互动雷达(admin_driver)', 'steps': [(1, '点击导航栏互动雷达选项', 'click', '/html/body/div[1]/div[1]/div[1]/div[2]/div/u...ing/interactRadar/create\"]', None), (7, '输入雷达标题', 'input', '//input[@placeholder=\"请输入雷达标题\"]', 'zdh测试正常创建互动雷达标题'), ...]}\nrequest = <FixtureRequest for <Function test_1[正常创建互动雷达]>>\n\n    @allure.feature(\"Web自动化测试平台\")\n    @allure.story(suite[\"name\"])\n    @pytest.mark.parametrize(\n        \"case\",\n        suite[\"case_list\"],\n        ids=[\n            handle_name(case[\"name\"])[0] for case in suite[\"case_list\"]\n        ],  # 参数化测试的名字\n    )  # 参数化的本质：动态生成用例\n    def test_abc(case, request):\n        logger.info(\"测试用例开始执行\")\n        # print(data)\n    \n        # 如果能够调用夹具，那么就有了浏览\n        # 根据excel内容，动态调用指定的夹具\n        # 1. 拿到用例名称     用例4(admin_driver)\n        # 2. 从用例名称中，解析夹具名称    admin_driver\n        case_name = handle_name(case[\"name\"])[0]\n        fixture_name = handle_name(case[\"name\"])[1]\n    \n        logger.info(f\"解析用例名称:{case_name=}, {fixture_name=}\")\n    \n        driver = request.getfixturevalue(fixture_name)\n        kw = KeyWord(driver)\n        kw.iframe_exit()\n        if \"码\" in case_name:\n            kw.click(\"/html/body/div[1]/div[1]/div[1]/div[2]/div/ul/li[4]/div/span\")\n        kw.refresh()\n        # 根据excel内容进行关键字的调用\n        for step in case[\"steps\"]:\n            name, key, args = handle_step(step)  # 这三个变量，可以再进行处理、修改\n            # 能不能加载csv文件\n            # 能行循环调用 func\n            logger.info(f\"执行关键字{name=}, {key=}, {args=}\")\n    \n            with allure.step(name):  # 在allure显式测试步骤\n                func = getattr(kw, key)  # 通过反射，难道关键字执行函数\n>               func(*args)  # 调用关键字函数\n\ncore\\until\\cases.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\until\\kdt.py:117: in click\n    element.click()  # 普通点击\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023129BBFFA0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-2a55b31c=\"\" src=\"http://oss-im-iss-uat.oss-cn-shanghai.aliyuncs.com/eddf67cdcb4c16539d6431079c251738-1683356638439.jpg\" style=\"width: 100%; height: 100%;\"> is not clickable at point (391, 310). Other element would receive the click: <div class=\"ivu-spin ivu-spin-large ivu-spin-fix fade-leave-active fade-leave-to\">...</div>\nE         (Session info: chrome=111.0.5563.147)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0066E073]\nE       \t(No symbol) [0x006039F1]\nE       \t(No symbol) [0x00514FF8]\nE       \t(No symbol) [0x0054551A]\nE       \t(No symbol) [0x00543DEA]\nE       \t(No symbol) [0x0054212B]\nE       \t(No symbol) [0x00541257]\nE       \t(No symbol) [0x00538F45]\nE       \t(No symbol) [0x0055B0FC]\nE       \t(No symbol) [0x00538966]\nE       \t(No symbol) [0x0055B454]\nE       \t(No symbol) [0x0056D68C]\nE       \t(No symbol) [0x0055AEF6]\nE       \t(No symbol) [0x005371A8]\nE       \t(No symbol) [0x0053830D]\nE       \tGetHandleVerifier [0x008E4FB2+2511634]\nE       \tGetHandleVerifier [0x0091A4D5+2730037]\nE       \tGetHandleVerifier [0x0091F12C+2749580]\nE       \tGetHandleVerifier [0x00715270+611792]\nE       \t(No symbol) [0x0060C622]\nE       \t(No symbol) [0x00611E38]\nE       \t(No symbol) [0x00611F1B]\nE       \t(No symbol) [0x0061C35B]\nE       \tBaseThreadInitThunk [0x75760099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]\n\nD:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException","steps":[{"name":"点击导航栏互动雷达选项","time":{"start":1683597625586,"stop":1683597627154,"duration":1568},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"切换互动雷达主页","time":{"start":1683597627154,"stop":1683597627837,"duration":683},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击创建雷达按钮","time":{"start":1683597627837,"stop":1683597628551,"duration":714},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"退出页面","time":{"start":1683597628551,"stop":1683597628559,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"切换创建互动雷达页面","time":{"start":1683597628560,"stop":1683597629043,"duration":483},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入雷达标题","time":{"start":1683597629044,"stop":1683597629577,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入雷达链接","time":{"start":1683597629578,"stop":1683597630240,"duration":662},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入链接标题","time":{"start":1683597630240,"stop":1683597630736,"duration":496},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入链接摘要","time":{"start":1683597630737,"stop":1683597631200,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击选择封面按钮","time":{"start":1683597631201,"stop":1683597631676,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"退出页面","time":{"start":1683597631677,"stop":1683597631683,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击第一张图片","time":{"start":1683597631683,"stop":1683597637107,"duration":5424},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img data-v-2a55b31c=\"\" src=\"http://oss-im-iss-uat.oss-cn-shanghai.aliyuncs.com/eddf67cdcb4c16539d6431079c251738-1683356638439.jpg\" style=\"width: 100%; height: 100%;\"> is not clickable at point (391, 310). Other element would receive the click: <div class=\"ivu-spin ivu-spin-large ivu-spin-fix fade-leave-active fade-leave-to\">...</div>\n  (Session info: chrome=111.0.5563.147)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0066E073]\n\t(No symbol) [0x006039F1]\n\t(No symbol) [0x00514FF8]\n\t(No symbol) [0x0054551A]\n\t(No symbol) [0x00543DEA]\n\t(No symbol) [0x0054212B]\n\t(No symbol) [0x00541257]\n\t(No symbol) [0x00538F45]\n\t(No symbol) [0x0055B0FC]\n\t(No symbol) [0x00538966]\n\t(No symbol) [0x0055B454]\n\t(No symbol) [0x0056D68C]\n\t(No symbol) [0x0055AEF6]\n\t(No symbol) [0x005371A8]\n\t(No symbol) [0x0053830D]\n\tGetHandleVerifier [0x008E4FB2+2511634]\n\tGetHandleVerifier [0x0091A4D5+2730037]\n\tGetHandleVerifier [0x0091F12C+2749580]\n\tGetHandleVerifier [0x00715270+611792]\n\t(No symbol) [0x0060C622]\n\t(No symbol) [0x00611E38]\n\t(No symbol) [0x00611F1B]\n\t(No symbol) [0x0061C35B]\n\tBaseThreadInitThunk [0x75760099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77887B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77887B3E+238]\n\n","statusTrace":"  File \"E:\\zdh\\pythonProject\\UI_frame\\core\\until\\cases.py\", line 108, in test_abc\n    func(*args)  # 调用关键字函数\n  File \"E:\\zdh\\pythonProject\\UI_frame\\core\\until\\kdt.py\", line 117, in click\n    element.click()  # 普通点击\n  File \"D:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 88, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 396, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\software\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[{"uid":"d94ff5d12b331e1","name":"log","source":"d94ff5d12b331e1.txt","type":"text/plain","size":2379},{"uid":"3c0864aca74b5446","name":"stdout","source":"3c0864aca74b5446.txt","type":"text/plain","size":28}],"parameters":[],"stepsCount":12,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[{"name":"admin_driver::0","time":{"start":1683598264307,"stop":1683598268419,"duration":4112},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"互动雷达模块"},{"name":"feature","value":"Web自动化测试平台"},{"name":"parentSuite","value":"core.testcase"},{"name":"suite","value":"test_excel"},{"name":"host","value":"LAPTOP-JPR7EIKK"},{"name":"thread","value":"56064-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"core.testcase.test_excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'name': '正常创建互动雷达(admin_driver)', 'steps': [(1, '点击导航栏互动雷达选项', 'click', '/html/body/div[1]/div[1]/div[1]/div[2]/div/ul/li[4]/div/span', None), (2, '切换互动雷达主页', 'iframe_enter', '//iframe[@src=\"/marketing/interactRadar/page\"]', None), (3, '点击创建雷达按钮', 'click', \"//span[contains(text(),'创建雷达')]\", None), (4, '退出页面', 'iframe_exit', None, None), (6, '切换创建互动雷达页面', 'iframe_enter', '//iframe[@src=\"/marketing/interactRadar/create\"]', None), (7, '输入雷达标题', 'input', '//input[@placeholder=\"请输入雷达标题\"]', 'zdh测试正常创建互动雷达标题'), (8, '输入雷达链接', 'input', '//input[@placeholder=\"请输入雷达链接\"]', 'https://mp.weixin.qq.com/s/0pFHRj1NkWfQvFDPnZEFJw'), (9, '输入链接标题', 'input', '//input[@placeholder=\"请输入链接标题\"]', 'zdh测试正常创建互动雷达链接标题'), (10, '输入链接摘要', 'input', '//textarea[@placeholder=\"请输入链接摘要\"]', 'zdh测试正常创建互动雷达链接摘要'), (11, '点击选择封面按钮', 'click', '//button[contains(text(),\"选择封面\")]', None), (12, '退出页面', 'iframe_exit', None, None), (13, '点击第一张图片', 'click', '//div[@class = \"app-grid-flex\"]/div[1]/div/div[1]/img', None), (14, '点击图片右上角复选框', 'click', '//div[@class = \"app-grid-flex\"]/div[1]/div/div[2]/label/span/input', None), (15, '点击选择图片页面确认按钮', 'click', '//span[contains(text(),\"确定\")]', None), (16, '切换创建互动雷达页面', 'iframe_enter', '//iframe[@src=\"/marketing/interactRadar/create\"]', None), (17, '点击创建互动雷达页面确认按钮', 'click', '//span[contains(text(),\"确定\")]', None), (18, '退出页面', 'iframe_exit', None, None), (19, '断言提示信息', 'assert_text', '//div[@class = \"ivu-notice-notice-content\"]/div', '创建成功')]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7b690dccb6b1dd7a.json","parameterValues":["{'name': '正常创建互动雷达(admin_driver)', 'steps': [(1, '点击导航栏互动雷达选项', 'click', '/html/body/div[1]/div[1]/div[1]/div[2]/div/ul/li[4]/div/span', None), (2, '切换互动雷达主页', 'iframe_enter', '//iframe[@src=\"/marketing/interactRadar/page\"]', None), (3, '点击创建雷达按钮', 'click', \"//span[contains(text(),'创建雷达')]\", None), (4, '退出页面', 'iframe_exit', None, None), (6, '切换创建互动雷达页面', 'iframe_enter', '//iframe[@src=\"/marketing/interactRadar/create\"]', None), (7, '输入雷达标题', 'input', '//input[@placeholder=\"请输入雷达标题\"]', 'zdh测试正常创建互动雷达标题'), (8, '输入雷达链接', 'input', '//input[@placeholder=\"请输入雷达链接\"]', 'https://mp.weixin.qq.com/s/0pFHRj1NkWfQvFDPnZEFJw'), (9, '输入链接标题', 'input', '//input[@placeholder=\"请输入链接标题\"]', 'zdh测试正常创建互动雷达链接标题'), (10, '输入链接摘要', 'input', '//textarea[@placeholder=\"请输入链接摘要\"]', 'zdh测试正常创建互动雷达链接摘要'), (11, '点击选择封面按钮', 'click', '//button[contains(text(),\"选择封面\")]', None), (12, '退出页面', 'iframe_exit', None, None), (13, '点击第一张图片', 'click', '//div[@class = \"app-grid-flex\"]/div[1]/div/div[1]/img', None), (14, '点击图片右上角复选框', 'click', '//div[@class = \"app-grid-flex\"]/div[1]/div/div[2]/label/span/input', None), (15, '点击选择图片页面确认按钮', 'click', '//span[contains(text(),\"确定\")]', None), (16, '切换创建互动雷达页面', 'iframe_enter', '//iframe[@src=\"/marketing/interactRadar/create\"]', None), (17, '点击创建互动雷达页面确认按钮', 'click', '//span[contains(text(),\"确定\")]', None), (18, '退出页面', 'iframe_exit', None, None), (19, '断言提示信息', 'assert_text', '//div[@class = \"ivu-notice-notice-content\"]/div', '创建成功')]}"]}